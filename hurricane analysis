# names of hurricanes
names = ['Cuba I', 'San Felipe II Okeechobee', 'Bahamas', 'Cuba II', 'CubaBrownsville', 'Tampico', 'Labor Day', 'New England', 'Carol', 'Janet', 'Carla', 'Hattie', 'Beulah', 'Camille', 'Edith', 'Anita', 'David', 'Allen', 'Gilbert', 'Hugo', 'Andrew', 'Mitch', 'Isabel', 'Ivan', 'Emily', 'Katrina', 'Rita', 'Wilma', 'Dean', 'Felix', 'Matthew', 'Irma', 'Maria', 'Michael']

# months of hurricanes
months = ['October', 'September', 'September', 'November', 'August', 'September', 'September', 'September', 'September', 'September', 'September', 'October', 'September', 'August', 'September', 'September', 'August', 'August', 'September', 'September', 'August', 'October', 'September', 'September', 'July', 'August', 'September', 'October', 'August', 'September', 'October', 'September', 'September', 'October']

# years of hurricanes
years = [1924, 1928, 1932, 1932, 1933, 1933, 1935, 1938, 1953, 1955, 1961, 1961, 1967, 1969, 1971, 1977, 1979, 1980, 1988, 1989, 1992, 1998, 2003, 2004, 2005, 2005, 2005, 2005, 2007, 2007, 2016, 2017, 2017, 2018]

# maximum sustained winds (mph) of hurricanes
max_sustained_winds = [165, 160, 160, 175, 160, 160, 185, 160, 160, 175, 175, 160, 160, 175, 160, 175, 175, 190, 185, 160, 175, 180, 165, 165, 160, 175, 180, 185, 175, 175, 165, 180, 175, 160]

# areas affected by each hurricane
areas_affected = [['Central America', 'Mexico', 'Cuba', 'Florida', 'The Bahamas'], ['Lesser Antilles', 'The Bahamas', 'United States East Coast', 'Atlantic Canada'], ['The Bahamas', 'Northeastern United States'], ['Lesser Antilles', 'Jamaica', 'Cayman Islands', 'Cuba', 'The Bahamas', 'Bermuda'], ['The Bahamas', 'Cuba', 'Florida', 'Texas', 'Tamaulipas'], ['Jamaica', 'Yucatn Peninsula'], ['The Bahamas', 'Florida', 'Georgia', 'The Carolinas', 'Virginia'], ['Southeastern United States', 'Northeastern United States', 'Southwestern Quebec'], ['Bermuda', 'New England', 'Atlantic Canada'], ['Lesser Antilles', 'Central America'], ['Texas', 'Louisiana', 'Midwestern United States'], ['Central America'], ['The Caribbean', 'Mexico', 'Texas'], ['Cuba', 'United States Gulf Coast'], ['The Caribbean', 'Central America', 'Mexico', 'United States Gulf Coast'], ['Mexico'], ['The Caribbean', 'United States East coast'], ['The Caribbean', 'Yucatn Peninsula', 'Mexico', 'South Texas'], ['Jamaica', 'Venezuela', 'Central America', 'Hispaniola', 'Mexico'], ['The Caribbean', 'United States East Coast'], ['The Bahamas', 'Florida', 'United States Gulf Coast'], ['Central America', 'Yucatn Peninsula', 'South Florida'], ['Greater Antilles', 'Bahamas', 'Eastern United States', 'Ontario'], ['The Caribbean', 'Venezuela', 'United States Gulf Coast'], ['Windward Islands', 'Jamaica', 'Mexico', 'Texas'], ['Bahamas', 'United States Gulf Coast'], ['Cuba', 'United States Gulf Coast'], ['Greater Antilles', 'Central America', 'Florida'], ['The Caribbean', 'Central America'], ['Nicaragua', 'Honduras'], ['Antilles', 'Venezuela', 'Colombia', 'United States East Coast', 'Atlantic Canada'], ['Cape Verde', 'The Caribbean', 'British Virgin Islands', 'U.S. Virgin Islands', 'Cuba', 'Florida'], ['Lesser Antilles', 'Virgin Islands', 'Puerto Rico', 'Dominican Republic', 'Turks and Caicos Islands'], ['Central America', 'United States Gulf Coast (especially Florida Panhandle)']]

# damages (USD($)) of hurricanes
damages = ['Damages not recorded', '100M', 'Damages not recorded', '40M', '27.9M', '5M', 'Damages not recorded', '306M', '2M', '65.8M', '326M', '60.3M', '208M', '1.42B', '25.4M', 'Damages not recorded', '1.54B', '1.24B', '7.1B', '10B', '26.5B', '6.2B', '5.37B', '23.3B', '1.01B', '125B', '12B', '29.4B', '1.76B', '720M', '15.1B', '64.8B', '91.6B', '25.1B']

# deaths for each hurricane
deaths = [90,4000,16,3103,179,184,408,682,5,1023,43,319,688,259,37,11,2068,269,318,107,65,19325,51,124,17,1836,125,87,45,133,603,138,3057,74]

# 1
# Update Recorded Damages
conversion = {"M": 1000000,
              "B": 1000000000}

# test function by updating damages
def upd_damage(listdam):
  new = []
  for i in listdam:
    if i == "Damages not recorded":
      new.append(i)
    else:
      if i[-1] == "M":
        i = float(i[:-1]) * 1000000
        new.append(i)
      elif i[-1] == "B":
        i = float(i[:-1]) * 1000000000
        new.append(i)
  return new

#print(upd_damage(damages))

# 2 
# Create a Table

new_dict = {}

values = []
for i in range(len(names)):
  dict1 = {}
  dict1.update({'Name':names[i], 'Month':months[i], 'Year':years[i], 'Max sustained wind':max_sustained_winds[i], 'Areas affected':areas_affected[i], 'Damage':upd_damage(damages)[i], 'Death':deaths[i]})
  values.append(dict1)

for i in range(len(names)):
  new_dict[names[i]]=values[i]

#print(new_dict)
# Create and view the hurricanes dictionary
new_dict1 = {}
for i in range(len(names)):
  if years[i] not in new_dict1.keys():
    new_dict1[years[i]]=values[i]
  else:
    new_val = [values[i-1]]
    new_val.append(values[i])
    new_dict1[years[i]]=new_val

#print(new_dict1)
# 3
areas_affected_new = []
for i in range(len(areas_affected)):
  for a in range(len(areas_affected[i])):
    areas_affected_new.append(areas_affected[i][a])
#print(areas_affected_new)
#print(len(areas_affected_new))
def unique_list(l1):
  unique = []
  for x in l1:
    if x not in unique:
      unique.append(x)
  return unique
#print(unique_list(areas_affected_new))

counts = {}
for i in unique_list(areas_affected_new):
  count = 0
  for a in areas_affected_new:
    if a == i:
      count += 1
    else:
      counts[i] = 1
    counts[i] = count
#print(counts)

most = max(counts.values())
most_key = [i for i in counts if counts[i]==most]
#print(most_key)
#print("The area affected the most:", most_key[0],"and it was by", most, "times")
# 6
# Calculating the Deadliest Hurricane
index = 0
for i in range(len(deaths)):
  if deaths[index] < deaths[i]:
    index = i

#print(index)

deadliest = names[index]
#print("The deadliest hurricane:", deadliest, "and it caused", deaths[index], "deaths")
# find highest mortality hurricane and the number of deaths
scale1 = []
scale2 = []
scale3 = []
scale4 = []
scale5 = []

for i in range(len(deaths)):
  if 0 < deaths[i] <= 100:
    scale1.append(i)
  elif 100<deaths[i]<=500:
    scale2.append(i)
  elif 500<deaths[i]<=1000:
    scale3.append(i)
  elif 1000<deaths[i]<=10000:
    scale4.append(i)
  else:
    scale5.append(i)

mort_dict = {}
def get_val_for_mort(sc):
  val = []
  for i in sc:
    val.append(new_dict[names[i]])
  return val

mort_dict[1] = get_val_for_mort(scale1)
mort_dict[2] = get_val_for_mort(scale2)
mort_dict[3] = get_val_for_mort(scale3)
mort_dict[4] = get_val_for_mort(scale4)
mort_dict[5] = get_val_for_mort(scale5)

#print(mort_dict)

# 8 Calculating Hurricane Maximum Damage
new_dam = []
for i in upd_damage(damages):
  if type(i) is float:
    new_dam.append(i)
#print(new_dam)

index = 0
for i in range(len(new_dam)):
  if new_dam[index] < new_dam[i]:
    index = i
greatest_dam = new_dam[index]
#print(greatest_dam)
# find highest damage inducing hurricane and its total cost

grt_dam_hur = [i for i in new_dict if new_dict[i]['Damage']== greatest_dam]
#print("The hurricane that caused the greatest damage:", grt_dam_hur[0], "with a damage of", greatest_dam, "USD")

# 9
# Rating Hurricanes by Damage
damage_scale = {0: 0,
                1: 100000000,
                2: 1000000000,
                3: 10000000000,
                4: 50000000000}
  
# categorize hurricanes in new dictionary with damage severity as key

hurricanes_by_damage = {0:[], 1:[], 2:[], 3:[], 4:[], 5:[]}

pop = []
for i in new_dict:
  if type(new_dict[i]['Damage']) is not float:
    pop.append(i)
#print(pop)
for i in pop:
  new_dict.pop(i)

for i in new_dict:
  if new_dict[i]['Damage']<= damage_scale[1]:
    hurricanes_by_damage[1].append(new_dict[i])
  elif damage_scale[1]<new_dict[i]['Damage']<= damage_scale[2]:
    hurricanes_by_damage[2].append(new_dict[i])
  elif damage_scale[2]< new_dict[i]['Damage']<= damage_scale[3]:
    hurricanes_by_damage[3].append(new_dict[i])
  elif damage_scale[3] < new_dict[i]['Damage']<=damage_scale[4]:
    hurricanes_by_damage[4].append(new_dict[i])
  else:
    hurricanes_by_damage[5].append(new_dict[i])

print(hurricanes_by_damage)
